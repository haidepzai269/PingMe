// backend/controllers/friend.controller.js
const pool = require('../db');

// üì§ G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
exports.sendFriendRequest = async (req, res) => {
  try {
    const senderId = req.user.id;
    const { receiverId } = req.body;

    if (senderId === receiverId) {
      return res.status(400).json({ message: 'Kh√¥ng th·ªÉ k·∫øt b·∫°n v·ªõi ch√≠nh m√¨nh' });
    }

    // Check ƒë√£ l√† b·∫°n b√® ch∆∞a
    const isFriend = await pool.query(
      `SELECT 1 FROM friends 
       WHERE (user1_id=$1 AND user2_id=$2) OR (user1_id=$2 AND user2_id=$1)`,
      [senderId, receiverId]
    );
    if (isFriend.rowCount > 0) {
      return res.status(400).json({ message: 'ƒê√£ l√† b·∫°n b√®' });
    }

    // Check ƒë√£ g·ª≠i l·ªùi m·ªùi ch∆∞a
    const pending = await pool.query(
      `SELECT 1 FROM friend_requests 
       WHERE (sender_id=$1 AND receiver_id=$2) 
          OR (sender_id=$2 AND receiver_id=$1)`,
      [senderId, receiverId]
    );
    if (pending.rowCount > 0) {
      return res.status(400).json({ message: 'ƒê√£ c√≥ l·ªùi m·ªùi ƒëang ch·ªù' });
    }

    await pool.query(
      `INSERT INTO friend_requests (sender_id, receiver_id) VALUES ($1, $2)`,
      [senderId, receiverId]
    );

    res.json({ message: 'ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n' });
  } catch (err) {
    console.error('L·ªói g·ª≠i l·ªùi m·ªùi:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// üì• L·∫•y danh s√°ch l·ªùi m·ªùi nh·∫≠n ƒë∆∞·ª£c
exports.getReceivedRequests = async (req, res) => {
  try {
    const userId = req.user.id;
    const result = await pool.query(
      `SELECT fr.id, fr.sender_id, u.username, u.avatar, fr.created_at
       FROM friend_requests fr
       JOIN users u ON fr.sender_id = u.id
       WHERE fr.receiver_id = $1`,
      [userId]
    );
    res.json(result.rows);
  } catch (err) {
    console.error('L·ªói l·∫•y l·ªùi m·ªùi:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// ‚úÖ Ch·∫•p nh·∫≠n l·ªùi m·ªùi
exports.acceptRequest = async (req, res) => {
  try {
    const userId = req.user.id;
    const { requestId } = req.params;

    // L·∫•y th√¥ng tin l·ªùi m·ªùi
    const request = await pool.query(
      `SELECT sender_id, receiver_id FROM friend_requests WHERE id=$1 AND receiver_id=$2`,
      [requestId, userId]
    );
    if (request.rowCount === 0) {
      return res.status(404).json({ message: 'L·ªùi m·ªùi kh√¥ng t·ªìn t·∫°i' });
    }

    const { sender_id, receiver_id } = request.rows[0];

    // Th√™m v√†o b·∫£ng b·∫°n b√®
    await pool.query(
      `INSERT INTO friends (user1_id, user2_id) VALUES ($1, $2)`,
      [sender_id, receiver_id]
    );

    // X√≥a kh·ªèi friend_requests
    await pool.query(`DELETE FROM friend_requests WHERE id=$1`, [requestId]);

    res.json({ message: 'ƒê√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n' });
  } catch (err) {
    console.error('L·ªói ch·∫•p nh·∫≠n l·ªùi m·ªùi:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// ‚ùå T·ª´ ch·ªëi l·ªùi m·ªùi
exports.declineRequest = async (req, res) => {
  try {
    const userId = req.user.id;
    const { requestId } = req.params;

    await pool.query(
      `DELETE FROM friend_requests WHERE id=$1 AND receiver_id=$2`,
      [requestId, userId]
    );

    res.json({ message: 'ƒê√£ t·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n' });
  } catch (err) {
    console.error('L·ªói t·ª´ ch·ªëi l·ªùi m·ªùi:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// üö´ H·ªßy k·∫øt b·∫°n
exports.unfriend = async (req, res) => {
  try {
    const userId = req.user.id;
    const { friendId } = req.params;

    await pool.query(
      `DELETE FROM friends 
       WHERE (user1_id=$1 AND user2_id=$2) OR (user1_id=$2 AND user2_id=$1)`,
      [userId, friendId]
    );

    res.json({ message: 'ƒê√£ h·ªßy k·∫øt b·∫°n' });
  } catch (err) {
    console.error('L·ªói h·ªßy k·∫øt b·∫°n:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};


// üìå L·∫•y tr·∫°ng th√°i k·∫øt b·∫°n
exports.getFriendStatus = async (req, res) => {
    try {
      const userId = req.user.id;
      const targetId = parseInt(req.params.userId);
  
      // ƒê√£ l√† b·∫°n b√®?
      const friend = await pool.query(
        `SELECT 1 FROM friends 
         WHERE (user1_id=$1 AND user2_id=$2) OR (user1_id=$2 AND user2_id=$1)`,
        [userId, targetId]
      );
      if (friend.rowCount > 0) {
        return res.json({ status: 'friends' });
      }
  
      // ƒêang ch·ªù m√¨nh ch·∫•p nh·∫≠n?
      const received = await pool.query(
        `SELECT id FROM friend_requests WHERE sender_id=$1 AND receiver_id=$2`,
        [targetId, userId]
      );
      if (received.rowCount > 0) {
        return res.json({
          status: 'request-received',
          requestId: received.rows[0].id
        });
      }
  
      // M√¨nh ƒë√£ g·ª≠i l·ªùi m·ªùi?
      const sent = await pool.query(
        `SELECT id FROM friend_requests WHERE sender_id=$1 AND receiver_id=$2`,
        [userId, targetId]
      );
      if (sent.rowCount > 0) {
        return res.json({ status: 'request-sent' });
      }
  
      // Kh√¥ng c√≥ g√¨
      res.json({ status: 'none' });
    } catch (err) {
      console.error('L·ªói l·∫•y tr·∫°ng th√°i:', err);
      res.status(500).json({ message: 'L·ªói server' });
    }
  };
  
  